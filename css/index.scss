/* UPDATE PACKAGE NAME AND VARIABLE PREFIX USING THE SAME VALUES AS "widget.json" */
$packageName: 'com.fliplet.image-component';
$variablePrefix: "imageComponent";

@import "package:com.fliplet.theme.default/scss/core/variables";
@import "package:com.fliplet.theme.default/scss/core/mixins";

@mixin componentStyles($options: (), $widgetInstanceId: "", $widgetInstanceUUID: "") {
  /* LIST HERE ALL VARIABLES FROM YOUR THEME, INCLUDING TABLET AND DESKTOP */
  $configuration: map-merge((imageComponent-Position: $imageComponent-Position,
        imageComponent-Display: $imageComponent-Display,
        imageComponent-PositionTop: $imageComponent-PositionTop,
        imageComponent-PositionRight: $imageComponent-PositionRight,
        imageComponent-PositionBottom: $imageComponent-PositionBottom,
        imageComponent-PositionLeft: $imageComponent-PositionLeft,
        imageComponent-Index: $imageComponent-Index,
        imageComponent-Width: $imageComponent-Width,
        imageComponent-Height: $imageComponent-Height,
        imageComponent-MinWidth: $imageComponent-MinWidth,
        imageComponent-MaxWidth: $imageComponent-MaxWidth,
        imageComponent-MinHeight: $imageComponent-MinHeight,
        imageComponent-MaxHeight: $imageComponent-MaxHeight,
        imageComponent-MarginTop: $imageComponent-MarginTop,
        imageComponent-MarginRight: $imageComponent-MarginRight,
        imageComponent-MarginBottom: $imageComponent-MarginBottom,
        imageComponent-MarginLeft: $imageComponent-MarginLeft,
        imageComponent-PaddingTop: $imageComponent-PaddingTop,
        imageComponent-PaddingRight: $imageComponent-PaddingRight,
        imageComponent-PaddingBottom: $imageComponent-PaddingBottom,
        imageComponent-PaddingLeft: $imageComponent-PaddingLeft,
        imageComponent-BorderSides: $imageComponent-BorderSides,
        imageComponent-BorderWidth: $imageComponent-BorderWidth,
        imageComponent-BorderStyle: $imageComponent-BorderStyle,
        imageComponent-BorderColor: $imageComponent-BorderColor,
        imageComponent-BorderRadius: $imageComponent-BorderRadius,
        imageComponent-ShadowStyle: $imageComponent-ShadowStyle,
        imageComponent-ShadowXoffset: $imageComponent-ShadowXoffset,
        imageComponent-ShadowYoffset: $imageComponent-ShadowYoffset,
        imageComponent-ShadowBlur: $imageComponent-ShadowBlur,
        imageComponent-ShadowSpread: $imageComponent-ShadowSpread,
        imageComponent-ShadowColor: $imageComponent-ShadowColor,
        imageComponent-Visibility: $imageComponent-Visibility,
        imageComponent-PositionTablet: $imageComponent-PositionTablet,
        imageComponent-DisplayTablet: $imageComponent-DisplayTablet,
        imageComponent-PositionTopTablet: $imageComponent-PositionTopTablet,
        imageComponent-PositionRightTablet: $imageComponent-PositionRightTablet,
        imageComponent-PositionBottomTablet: $imageComponent-PositionBottomTablet,
        imageComponent-PositionLeftTablet: $imageComponent-PositionLeftTablet,
        imageComponent-IndexTablet: $imageComponent-IndexTablet,
        imageComponent-WidthTablet: $imageComponent-WidthTablet,
        imageComponent-HeightTablet: $imageComponent-HeightTablet,
        imageComponent-MinWidthTablet: $imageComponent-MinWidthTablet,
        imageComponent-MaxWidthTablet: $imageComponent-MaxWidthTablet,
        imageComponent-MinHeightTablet: $imageComponent-MinHeightTablet,
        imageComponent-MaxHeightTablet: $imageComponent-MaxHeightTablet,
        imageComponent-MarginTopTablet: $imageComponent-MarginTopTablet,
        imageComponent-MarginRightTablet: $imageComponent-MarginRightTablet,
        imageComponent-MarginBottomTablet: $imageComponent-MarginBottomTablet,
        imageComponent-MarginLeftTablet: $imageComponent-MarginLeftTablet,
        imageComponent-PaddingTopTablet: $imageComponent-PaddingTopTablet,
        imageComponent-PaddingRightTablet: $imageComponent-PaddingRightTablet,
        imageComponent-PaddingBottomTablet: $imageComponent-PaddingBottomTablet,
        imageComponent-PaddingLeftTablet: $imageComponent-PaddingLeftTablet,
        imageComponent-BorderSidesTablet: $imageComponent-BorderSidesTablet,
        imageComponent-BorderWidthTablet: $imageComponent-BorderWidthTablet,
        imageComponent-BorderStyleTablet: $imageComponent-BorderStyleTablet,
        imageComponent-BorderColorTablet: $imageComponent-BorderColorTablet,
        imageComponent-BorderRadiusTablet: $imageComponent-BorderRadiusTablet,
        imageComponent-ShadowStyleTablet: $imageComponent-ShadowStyleTablet,
        imageComponent-ShadowXoffsetTablet: $imageComponent-ShadowXoffsetTablet,
        imageComponent-ShadowYoffsetTablet: $imageComponent-ShadowYoffsetTablet,
        imageComponent-ShadowBlurTablet: $imageComponent-ShadowBlurTablet,
        imageComponent-ShadowSpreadTablet: $imageComponent-ShadowSpreadTablet,
        imageComponent-ShadowColorTablet: $imageComponent-ShadowColorTablet,
        imageComponent-VisibilityTablet: $imageComponent-VisibilityTablet,
        imageComponent-PositionDesktop: $imageComponent-PositionDesktop,
        imageComponent-DisplayDesktop: $imageComponent-DisplayDesktop,
        imageComponent-PositionTopDesktop: $imageComponent-PositionTopDesktop,
        imageComponent-PositionRightDesktop: $imageComponent-PositionRightDesktop,
        imageComponent-PositionBottomDesktop: $imageComponent-PositionBottomDesktop,
        imageComponent-PositionLeftDesktop: $imageComponent-PositionLeftDesktop,
        imageComponent-IndexDesktop: $imageComponent-IndexDesktop,
        imageComponent-WidthDesktop: $imageComponent-WidthDesktop,
        imageComponent-HeightDesktop: $imageComponent-HeightDesktop,
        imageComponent-MinWidthDesktop: $imageComponent-MinWidthDesktop,
        imageComponent-MaxWidthDesktop: $imageComponent-MaxWidthDesktop,
        imageComponent-MinHeightDesktop: $imageComponent-MinHeightDesktop,
        imageComponent-MaxHeightDesktop: $imageComponent-MaxHeightDesktop,
        imageComponent-MarginTopDesktop: $imageComponent-MarginTopDesktop,
        imageComponent-MarginRightDesktop: $imageComponent-MarginRightDesktop,
        imageComponent-MarginBottomDesktop: $imageComponent-MarginBottomDesktop,
        imageComponent-MarginLeftDesktop: $imageComponent-MarginLeftDesktop,
        imageComponent-PaddingTopDesktop: $imageComponent-PaddingTopDesktop,
        imageComponent-PaddingRightDesktop: $imageComponent-PaddingRightDesktop,
        imageComponent-PaddingBottomDesktop: $imageComponent-PaddingBottomDesktop,
        imageComponent-PaddingLeftDesktop: $imageComponent-PaddingLeftDesktop,
        imageComponent-BorderSidesDesktop: $imageComponent-BorderSidesDesktop,
        imageComponent-BorderWidthDesktop: $imageComponent-BorderWidthDesktop,
        imageComponent-BorderStyleDesktop: $imageComponent-BorderStyleDesktop,
        imageComponent-BorderColorDesktop: $imageComponent-BorderColorDesktop,
        imageComponent-BorderRadiusDesktop: $imageComponent-BorderRadiusDesktop,
        imageComponent-ShadowStyleDesktop: $imageComponent-ShadowStyleDesktop,
        imageComponent-ShadowXoffsetDesktop: $imageComponent-ShadowXoffsetDesktop,
        imageComponent-ShadowYoffsetDesktop: $imageComponent-ShadowYoffsetDesktop,
        imageComponent-ShadowBlurDesktop: $imageComponent-ShadowBlurDesktop,
        imageComponent-ShadowSpreadDesktop: $imageComponent-ShadowSpreadDesktop,
        imageComponent-ShadowColorDesktop: $imageComponent-ShadowColorDesktop,
        imageComponent-VisibilityDesktop: $imageComponent-VisibilityDesktop),
      $options);

  $instanceSelector: '[data-widget-package="#{$packageName}"]';

  @if $widgetInstanceUUID !="" {
    $instanceSelector: '#{$instanceSelector}[data-uuid="#{$widgetInstanceUUID}"]';
  }

  @else if $widgetInstanceId !="" {
    $instanceSelector: '#{$instanceSelector}[data-id="#{$widgetInstanceId}"]';
  }

  #{$instanceSelector} {
    flex-shrink: 0;
    /* Fix for IE11 when images are inside a flex container */
    position: map-get($configuration, imageComponent-ComponentPosition);
    z-index: map-get($configuration, imageComponent-Index);

    @if map-get($configuration, imageComponent-Position)=="relative" {
      @if map-get($configuration, imageComponent-Visibility)=="visible" {
        @if map-get($configuration, imageComponent-Width)=="100%" {
          display: block !important;
        }

        @else {
          display: map-get($configuration, imageComponent-Display) !important;
        }
      }

      @else {
        display: none !important;
      }
    }

    @else {
      @if map-get($configuration, imageComponent-Visibility)=="visible" {
        display: block !important;
      }

      @else {
        display: none !important;
      }

      top: map-get($configuration, imageComponent-PositionTop);
      right: map-get($configuration, imageComponent-PositionRight);
      bottom: map-get($configuration, imageComponent-PositionBottom);
      left: map-get($configuration, imageComponent-PositionLeft);
    }

    width: map-get($configuration, imageComponent-Width);
    min-width: map-get($configuration, imageComponent-MinWidth);
    max-width: map-get($configuration, imageComponent-MaxWidth);
    margin: map-get($configuration, imageComponent-MarginTop) map-get($configuration, imageComponent-MarginRight) map-get($configuration, imageComponent-MarginBottom) map-get($configuration, imageComponent-MarginLeft);
    padding: map-get($configuration, imageComponent-PaddingTop) map-get($configuration, imageComponent-PaddingRight) map-get($configuration, imageComponent-PaddingBottom) map-get($configuration, imageComponent-PaddingLeft);

    // Styles for tablet
    @include above($tabletBreakpoint) {
      position: map-get($configuration, imageComponent-PositionTablet);
      z-index: map-get($configuration, imageComponent-IndexTablet);

      @if map-get($configuration, imageComponent-PositionTablet)=="relative" {
        @if map-get($configuration, imageComponent-VisibilityTablet)=="visible" {
          @if map-get($configuration, imageComponent-WidthTablet)=="100%" {
            display: block !important;
          }

          @else {
            display: map-get($configuration, imageComponent-DisplayTablet) !important;
          }
        }

        @else {
          display: none !important;
        }
      }

      @else {
        @if map-get($configuration, imageComponent-VisibilityTablet)=="visible" {
          display: block !important;
        }

        @else {
          display: none !important;
        }

        top: map-get($configuration, imageComponent-PositionTopTablet);
        right: map-get($configuration, imageComponent-PositionRightTablet);
        bottom: map-get($configuration, imageComponent-PositionBottomTablet);
        left: map-get($configuration, imageComponent-PositionLeftTablet);
      }

      width: map-get($configuration, imageComponent-WidthTablet);
      min-width: map-get($configuration, imageComponent-MinWidthTablet);
      max-width: map-get($configuration, imageComponent-MaxWidthTablet);
      margin: map-get($configuration, imageComponent-MarginTopTablet) map-get($configuration, imageComponent-MarginRightTablet) map-get($configuration, imageComponent-MarginBottomTablet) map-get($configuration, imageComponent-MarginLeftTablet);
      padding: map-get($configuration, imageComponent-PaddingTopTablet) map-get($configuration, imageComponent-PaddingRightTablet) map-get($configuration, imageComponent-PaddingBottomTablet) map-get($configuration, imageComponent-PaddingLeftTablet);
    }

    // Styles for desktop
    @include above($desktopBreakpoint) {
      position: map-get($configuration, imageComponent-PositionDesktop);
      z-index: map-get($configuration, imageComponent-IndexDesktop);

      @if map-get($configuration, imageComponent-PositionDesktop)=="relative" {
        @if map-get($configuration, imageComponent-VisibilityDesktop)=="visible" {
          @if map-get($configuration, imageComponent-WidthDesktop)=="100%" {
            display: block !important;
          }

          @else {
            display: map-get($configuration, imageComponent-DisplayDesktop) !important;
          }
        }

        @else {
          display: none !important;
        }
      }

      @else {
        @if map-get($configuration, imageComponent-VisibilityDesktop)=="visible" {
          display: block !important;
        }

        @else {
          display: none !important;
        }

        top: map-get($configuration, imageComponent-PositionTopDesktop);
        right: map-get($configuration, imageComponent-PositionRightDesktop);
        bottom: map-get($configuration, imageComponent-PositionBottomDesktop);
        left: map-get($configuration, imageComponent-PositionLeftDesktop);
      }

      width: map-get($configuration, imageComponent-WidthDesktop);
      min-width: map-get($configuration, imageComponent-MinWidthDesktop);
      max-width: map-get($configuration, imageComponent-MaxWidthDesktop);
      margin: map-get($configuration, imageComponent-MarginTopDesktop) map-get($configuration, imageComponent-MarginRightDesktop) map-get($configuration, imageComponent-MarginBottomDesktop) map-get($configuration, imageComponent-MarginLeftDesktop);
      padding: map-get($configuration, imageComponent-PaddingTopDesktop) map-get($configuration, imageComponent-PaddingRightDesktop) map-get($configuration, imageComponent-PaddingBottomDesktop) map-get($configuration, imageComponent-PaddingLeftDesktop);
    }

    img[data-image-id] {
      height: map-get($configuration, imageComponent-Height);
      min-height: map-get($configuration, imageComponent-MinHeight);
      max-height: map-get($configuration, imageComponent-MaxHeight);

      @include borderOnly((borderSides: map-get($configuration, imageComponent-BorderSides),
          borderWidth: map-get($configuration, imageComponent-BorderWidth),
          borderStyle: map-get($configuration, imageComponent-BorderStyle),
          borderColor: map-get($configuration, imageComponent-BorderColor)));
      border-radius: map-get($configuration, imageComponent-BorderRadius);

      @include shadowOnly((shadowStyle: map-get($configuration, imageComponent-ShadowStyle),
          shadowXOffset: map-get($configuration, imageComponent-ShadowXoffset),
          shadowYOffset: map-get($configuration, imageComponent-ShadowYoffset),
          shadowBlur: map-get($configuration, imageComponent-ShadowBlur),
          shadowSpread: map-get($configuration, imageComponent-ShadowSpread),
          shadowColor: map-get($configuration, imageComponent-ShadowColor)));

      // Styles for tablet
      @include above($tabletBreakpoint) {
        height: map-get($configuration, imageComponent-HeightTablet);
        min-height: map-get($configuration, imageComponent-MinHeightTablet);
        max-height: map-get($configuration, imageComponent-MaxHeightTablet);

        @include borderOnly((borderSides: map-get($configuration, imageComponent-BorderSidesTablet),
            borderWidth: map-get($configuration, imageComponent-BorderWidthTablet),
            borderStyle: map-get($configuration, imageComponent-BorderStyleTablet),
            borderColor: map-get($configuration, imageComponent-BorderColorTablet)));
        border-radius: map-get($configuration, imageComponent-BorderRadiusTablet);

        @include shadowOnly((shadowStyle: map-get($configuration, imageComponent-ShadowStyleTablet),
            shadowXOffset: map-get($configuration, imageComponent-ShadowXoffsetTablet),
            shadowYOffset: map-get($configuration, imageComponent-ShadowYoffsetTablet),
            shadowBlur: map-get($configuration, imageComponent-ShadowBlurTablet),
            shadowSpread: map-get($configuration, imageComponent-ShadowSpreadTablet),
            shadowColor: map-get($configuration, imageComponent-ShadowColorTablet)));
      }

      // Styles for desktop
      @include above($desktopBreakpoint) {
        height: map-get($configuration, imageComponent-HeightDesktop);
        min-height: map-get($configuration, imageComponent-MinHeightDesktop);
        max-height: map-get($configuration, imageComponent-MaxHeightDesktop);

        @include borderOnly((borderSides: map-get($configuration, imageComponent-BorderSidesDesktop),
            borderWidth: map-get($configuration, imageComponent-BorderWidthDesktop),
            borderStyle: map-get($configuration, imageComponent-BorderStyleDesktop),
            borderColor: map-get($configuration, imageComponent-BorderColorDesktop)));
        border-radius: map-get($configuration, imageComponent-BorderRadiusDesktop);

        @include shadowOnly((shadowStyle: map-get($configuration, imageComponent-ShadowStyleDesktop),
            shadowXOffset: map-get($configuration, imageComponent-ShadowXoffsetDesktop),
            shadowYOffset: map-get($configuration, imageComponent-ShadowYoffsetDesktop),
            shadowBlur: map-get($configuration, imageComponent-ShadowBlurDesktop),
            shadowSpread: map-get($configuration, imageComponent-ShadowSpreadDesktop),
            shadowColor: map-get($configuration, imageComponent-ShadowColorDesktop)));
      }
    }
  }
}

/* Export common styles */
@include componentStyles();

/* Export styles for each widget instance */
@if variable-exists(widgetInstances) {
  @each $widgetInstance in $widgetInstances {
    @if nth($widgetInstance, 2)==$variablePrefix {
      @include componentStyles(nth($widgetInstance, 3), nth($widgetInstance, 1), nth($widgetInstance, 4));
    }
  }
}