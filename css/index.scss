/* UPDATE PACKAGE NAME AND VARIABLE PREFIX USING THE SAME VALUES AS "widget.json" */
$packageName: 'com.fliplet.image';
$variablePrefix: "image";

@import "package:com.fliplet.theme.default/scss/core/variables";
@import "package:com.fliplet.theme.default/scss/core/mixins";

@mixin componentStyles($options: (), $widgetInstanceId: "", $widgetInstanceUUID: "") {
  /* LIST HERE ALL VARIABLES FROM YOUR THEME, INCLUDING TABLET AND DESKTOP */
  $configuration: map-merge((image-Position: $image-Position,
        image-Display: $image-Display,
        image-PositionTop: $image-PositionTop,
        image-PositionRight: $image-PositionRight,
        image-PositionBottom: $image-PositionBottom,
        image-PositionLeft: $image-PositionLeft,
        image-Index: $image-Index,
        image-Width: $image-Width,
        image-Height: $image-Height,
        image-MinWidth: $image-MinWidth,
        image-MaxWidth: $image-MaxWidth,
        image-MinHeight: $image-MinHeight,
        image-MaxHeight: $image-MaxHeight,
        image-MarginTop: $image-MarginTop,
        image-MarginRight: $image-MarginRight,
        image-MarginBottom: $image-MarginBottom,
        image-MarginLeft: $image-MarginLeft,
        image-PaddingTop: $image-PaddingTop,
        image-PaddingRight: $image-PaddingRight,
        image-PaddingBottom: $image-PaddingBottom,
        image-PaddingLeft: $image-PaddingLeft,
        image-BorderSides: $image-BorderSides,
        image-BorderWidth: $image-BorderWidth,
        image-BorderStyle: $image-BorderStyle,
        image-BorderColor: $image-BorderColor,
        image-BorderRadius: $image-BorderRadius,
        image-ShadowStyle: $image-ShadowStyle,
        image-ShadowXoffset: $image-ShadowXoffset,
        image-ShadowYoffset: $image-ShadowYoffset,
        image-ShadowBlur: $image-ShadowBlur,
        image-ShadowSpread: $image-ShadowSpread,
        image-ShadowColor: $image-ShadowColor,
        image-Visibility: $image-Visibility,
        image-PositionTablet: $image-PositionTablet,
        image-DisplayTablet: $image-DisplayTablet,
        image-PositionTopTablet: $image-PositionTopTablet,
        image-PositionRightTablet: $image-PositionRightTablet,
        image-PositionBottomTablet: $image-PositionBottomTablet,
        image-PositionLeftTablet: $image-PositionLeftTablet,
        image-IndexTablet: $image-IndexTablet,
        image-WidthTablet: $image-WidthTablet,
        image-HeightTablet: $image-HeightTablet,
        image-MinWidthTablet: $image-MinWidthTablet,
        image-MaxWidthTablet: $image-MaxWidthTablet,
        image-MinHeightTablet: $image-MinHeightTablet,
        image-MaxHeightTablet: $image-MaxHeightTablet,
        image-MarginTopTablet: $image-MarginTopTablet,
        image-MarginRightTablet: $image-MarginRightTablet,
        image-MarginBottomTablet: $image-MarginBottomTablet,
        image-MarginLeftTablet: $image-MarginLeftTablet,
        image-PaddingTopTablet: $image-PaddingTopTablet,
        image-PaddingRightTablet: $image-PaddingRightTablet,
        image-PaddingBottomTablet: $image-PaddingBottomTablet,
        image-PaddingLeftTablet: $image-PaddingLeftTablet,
        image-BorderSidesTablet: $image-BorderSidesTablet,
        image-BorderWidthTablet: $image-BorderWidthTablet,
        image-BorderStyleTablet: $image-BorderStyleTablet,
        image-BorderColorTablet: $image-BorderColorTablet,
        image-BorderRadiusTablet: $image-BorderRadiusTablet,
        image-ShadowStyleTablet: $image-ShadowStyleTablet,
        image-ShadowXoffsetTablet: $image-ShadowXoffsetTablet,
        image-ShadowYoffsetTablet: $image-ShadowYoffsetTablet,
        image-ShadowBlurTablet: $image-ShadowBlurTablet,
        image-ShadowSpreadTablet: $image-ShadowSpreadTablet,
        image-ShadowColorTablet: $image-ShadowColorTablet,
        image-VisibilityTablet: $image-VisibilityTablet,
        image-PositionDesktop: $image-PositionDesktop,
        image-DisplayDesktop: $image-DisplayDesktop,
        image-PositionTopDesktop: $image-PositionTopDesktop,
        image-PositionRightDesktop: $image-PositionRightDesktop,
        image-PositionBottomDesktop: $image-PositionBottomDesktop,
        image-PositionLeftDesktop: $image-PositionLeftDesktop,
        image-IndexDesktop: $image-IndexDesktop,
        image-WidthDesktop: $image-WidthDesktop,
        image-HeightDesktop: $image-HeightDesktop,
        image-MinWidthDesktop: $image-MinWidthDesktop,
        image-MaxWidthDesktop: $image-MaxWidthDesktop,
        image-MinHeightDesktop: $image-MinHeightDesktop,
        image-MaxHeightDesktop: $image-MaxHeightDesktop,
        image-MarginTopDesktop: $image-MarginTopDesktop,
        image-MarginRightDesktop: $image-MarginRightDesktop,
        image-MarginBottomDesktop: $image-MarginBottomDesktop,
        image-MarginLeftDesktop: $image-MarginLeftDesktop,
        image-PaddingTopDesktop: $image-PaddingTopDesktop,
        image-PaddingRightDesktop: $image-PaddingRightDesktop,
        image-PaddingBottomDesktop: $image-PaddingBottomDesktop,
        image-PaddingLeftDesktop: $image-PaddingLeftDesktop,
        image-BorderSidesDesktop: $image-BorderSidesDesktop,
        image-BorderWidthDesktop: $image-BorderWidthDesktop,
        image-BorderStyleDesktop: $image-BorderStyleDesktop,
        image-BorderColorDesktop: $image-BorderColorDesktop,
        image-BorderRadiusDesktop: $image-BorderRadiusDesktop,
        image-ShadowStyleDesktop: $image-ShadowStyleDesktop,
        image-ShadowXoffsetDesktop: $image-ShadowXoffsetDesktop,
        image-ShadowYoffsetDesktop: $image-ShadowYoffsetDesktop,
        image-ShadowBlurDesktop: $image-ShadowBlurDesktop,
        image-ShadowSpreadDesktop: $image-ShadowSpreadDesktop,
        image-ShadowColorDesktop: $image-ShadowColorDesktop,
        image-VisibilityDesktop: $image-VisibilityDesktop),
      $options);

  $instanceSelector: '[data-widget-package="#{$packageName}"]';

  @if $widgetInstanceUUID !="" {
    $instanceSelector: '#{$instanceSelector}[data-uuid="#{$widgetInstanceUUID}"]';
  }

  @else if $widgetInstanceId !="" {
    $instanceSelector: '#{$instanceSelector}[data-id="#{$widgetInstanceId}"]';
  }

  #{$instanceSelector} {
    flex-shrink: 0;
    /* Fix for IE11 when images are inside a flex container */
    position: map-get($configuration, image-Position);
    z-index: map-get($configuration, image-Index);

    @if map-get($configuration, image-Position)=="relative" {
      @if map-get($configuration, image-Visibility)=="visible" {
        @if map-get($configuration, image-Width)=="100%" {
          display: block !important;
        }

        @else {
          display: map-get($configuration, image-Display) !important;
        }
      }

      @else {
        display: none !important;
      }
    }

    @else {
      @if map-get($configuration, image-Visibility)=="visible" {
        display: block !important;
      }

      @else {
        display: none !important;
      }

      top: map-get($configuration, image-PositionTop);
      right: map-get($configuration, image-PositionRight);
      bottom: map-get($configuration, image-PositionBottom);
      left: map-get($configuration, image-PositionLeft);
    }

    width: map-get($configuration, image-Width);
    min-width: map-get($configuration, image-MinWidth);
    max-width: map-get($configuration, image-MaxWidth);
    margin: map-get($configuration, image-MarginTop) map-get($configuration, image-MarginRight) map-get($configuration, image-MarginBottom) map-get($configuration, image-MarginLeft);
    padding: map-get($configuration, image-PaddingTop) map-get($configuration, image-PaddingRight) map-get($configuration, image-PaddingBottom) map-get($configuration, image-PaddingLeft);

    // Styles for tablet
    @include above($tabletBreakpoint) {
      position: map-get($configuration, image-PositionTablet);
      z-index: map-get($configuration, image-IndexTablet);

      @if map-get($configuration, image-PositionTablet)=="relative" {
        @if map-get($configuration, image-VisibilityTablet)=="visible" {
          @if map-get($configuration, image-WidthTablet)=="100%" {
            display: block !important;
          }

          @else {
            display: map-get($configuration, image-DisplayTablet) !important;
          }
        }

        @else {
          display: none !important;
        }
      }

      @else {
        @if map-get($configuration, image-VisibilityTablet)=="visible" {
          display: block !important;
        }

        @else {
          display: none !important;
        }

        top: map-get($configuration, image-PositionTopTablet);
        right: map-get($configuration, image-PositionRightTablet);
        bottom: map-get($configuration, image-PositionBottomTablet);
        left: map-get($configuration, image-PositionLeftTablet);
      }

      width: map-get($configuration, image-WidthTablet);
      min-width: map-get($configuration, image-MinWidthTablet);
      max-width: map-get($configuration, image-MaxWidthTablet);
      margin: map-get($configuration, image-MarginTopTablet) map-get($configuration, image-MarginRightTablet) map-get($configuration, image-MarginBottomTablet) map-get($configuration, image-MarginLeftTablet);
      padding: map-get($configuration, image-PaddingTopTablet) map-get($configuration, image-PaddingRightTablet) map-get($configuration, image-PaddingBottomTablet) map-get($configuration, image-PaddingLeftTablet);
    }

    // Styles for desktop
    @include above($desktopBreakpoint) {
      position: map-get($configuration, image-PositionDesktop);
      z-index: map-get($configuration, image-IndexDesktop);

      @if map-get($configuration, image-PositionDesktop)=="relative" {
        @if map-get($configuration, image-VisibilityDesktop)=="visible" {
          @if map-get($configuration, image-WidthDesktop)=="100%" {
            display: block !important;
          }

          @else {
            display: map-get($configuration, image-DisplayDesktop) !important;
          }
        }

        @else {
          display: none !important;
        }
      }

      @else {
        @if map-get($configuration, image-VisibilityDesktop)=="visible" {
          display: block !important;
        }

        @else {
          display: none !important;
        }

        top: map-get($configuration, image-PositionTopDesktop);
        right: map-get($configuration, image-PositionRightDesktop);
        bottom: map-get($configuration, image-PositionBottomDesktop);
        left: map-get($configuration, image-PositionLeftDesktop);
      }

      width: map-get($configuration, image-WidthDesktop);
      min-width: map-get($configuration, image-MinWidthDesktop);
      max-width: map-get($configuration, image-MaxWidthDesktop);
      margin: map-get($configuration, image-MarginTopDesktop) map-get($configuration, image-MarginRightDesktop) map-get($configuration, image-MarginBottomDesktop) map-get($configuration, image-MarginLeftDesktop);
      padding: map-get($configuration, image-PaddingTopDesktop) map-get($configuration, image-PaddingRightDesktop) map-get($configuration, image-PaddingBottomDesktop) map-get($configuration, image-PaddingLeftDesktop);
    }

    img[data-image-id] {
      height: map-get($configuration, image-Height);
      min-height: map-get($configuration, image-MinHeight);
      max-height: map-get($configuration, image-MaxHeight);

      @include borderOnly((borderSides: map-get($configuration, image-BorderSides),
          borderWidth: map-get($configuration, image-BorderWidth),
          borderStyle: map-get($configuration, image-BorderStyle),
          borderColor: map-get($configuration, image-BorderColor)));
      border-radius: map-get($configuration, image-BorderRadius);

      @include shadowOnly((shadowStyle: map-get($configuration, image-ShadowStyle),
          shadowXOffset: map-get($configuration, image-ShadowXoffset),
          shadowYOffset: map-get($configuration, image-ShadowYoffset),
          shadowBlur: map-get($configuration, image-ShadowBlur),
          shadowSpread: map-get($configuration, image-ShadowSpread),
          shadowColor: map-get($configuration, image-ShadowColor)));

      // Styles for tablet
      @include above($tabletBreakpoint) {
        height: map-get($configuration, image-HeightTablet);
        min-height: map-get($configuration, image-MinHeightTablet);
        max-height: map-get($configuration, image-MaxHeightTablet);

        @include borderOnly((borderSides: map-get($configuration, image-BorderSidesTablet),
            borderWidth: map-get($configuration, image-BorderWidthTablet),
            borderStyle: map-get($configuration, image-BorderStyleTablet),
            borderColor: map-get($configuration, image-BorderColorTablet)));
        border-radius: map-get($configuration, image-BorderRadiusTablet);

        @include shadowOnly((shadowStyle: map-get($configuration, image-ShadowStyleTablet),
            shadowXOffset: map-get($configuration, image-ShadowXoffsetTablet),
            shadowYOffset: map-get($configuration, image-ShadowYoffsetTablet),
            shadowBlur: map-get($configuration, image-ShadowBlurTablet),
            shadowSpread: map-get($configuration, image-ShadowSpreadTablet),
            shadowColor: map-get($configuration, image-ShadowColorTablet)));
      }

      // Styles for desktop
      @include above($desktopBreakpoint) {
        height: map-get($configuration, image-HeightDesktop);
        min-height: map-get($configuration, image-MinHeightDesktop);
        max-height: map-get($configuration, image-MaxHeightDesktop);

        @include borderOnly((borderSides: map-get($configuration, image-BorderSidesDesktop),
            borderWidth: map-get($configuration, image-BorderWidthDesktop),
            borderStyle: map-get($configuration, image-BorderStyleDesktop),
            borderColor: map-get($configuration, image-BorderColorDesktop)));
        border-radius: map-get($configuration, image-BorderRadiusDesktop);

        @include shadowOnly((shadowStyle: map-get($configuration, image-ShadowStyleDesktop),
            shadowXOffset: map-get($configuration, image-ShadowXoffsetDesktop),
            shadowYOffset: map-get($configuration, image-ShadowYoffsetDesktop),
            shadowBlur: map-get($configuration, image-ShadowBlurDesktop),
            shadowSpread: map-get($configuration, image-ShadowSpreadDesktop),
            shadowColor: map-get($configuration, image-ShadowColorDesktop)));
      }
    }
  }
}

/* Export common styles */
@include componentStyles();

/* Export styles for each widget instance */
@if variable-exists(widgetInstances) {
  @each $widgetInstance in $widgetInstances {
    @if nth($widgetInstance, 2)==$variablePrefix {
      @include componentStyles(nth($widgetInstance, 3), nth($widgetInstance, 1), nth($widgetInstance, 4));
    }
  }
}